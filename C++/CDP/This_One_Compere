// Kaleb Nails
// Created: 9/23/2022
// Modified: 11/29/2022
// original name: Testrawsender
//
// Purpose: To send 1 floating point number to another hellteck wirelessly using CDP.
// The other hellteck recieving is running the code:
// original reciever name: Testreciever
// New name: CDP_Wireless_Float_Reciever.ino
//




#include <MamaDuck.h>
#include <arduino-timer.h>
#include <string>

#ifdef SERIAL_PORT_USBVIRTUAL
#define Serial SERIAL_PORT_USBVIRTUAL
#endif


MamaDuck duck;


DuckDisplay* display = NULL;
float Rnd;
const int INTERVAL_MS = 500; //1000; 
int counter = 1;
bool sentOk = false;
char Buffer[100];
#define N_FLOATS 20
uint8_t myChars[4*N_FLOATS];
float myFloats[N_FLOATS];


// LORA RF CONFIG
#define LORA_FREQ 915.0 // Frequency Range. Set for US Region 915.0Mhz
#define LORA_TXPOWER 20 // Transmit Power
// LORA HELTEC PIN CONFIG
#define LORA_CS_PIN 18
#define LORA_DIO0_PIN 26
#define LORA_DIO1_PIN -1 // unused
#define LORA_RST_PIN 14

auto timer = timer_create_default();

void setup() {
  // We are using a hardcoded device id here, but it should be retrieved or
  // given during the device provisioning then converted to a byte vector to
  // setup the duck NOTE: The Device ID must be exactly 8 bytes otherwise it
  // will get rejected
  std::string deviceId("MAMA0002");
  std::vector<byte> devId;
  devId.insert(devId.end(), deviceId.begin(), deviceId.end());
  //duck.setupWithDefaults(devId);
  //Serial.begin(115200);
  //Set the Device ID
  duck.setDeviceId(devId);
  // initialize the serial component with the hardware supported baudrate
  duck.setupSerial(115200);
  // initialize the LoRa radio with specific settings. This will overwrites settings defined in the CDP config file cdpcfg.h
  duck.setupRadio(LORA_FREQ, LORA_CS_PIN, LORA_RST_PIN, LORA_DIO0_PIN, LORA_DIO1_PIN, LORA_TXPOWER);
  // initialize the wifi access point with a custom AP name
  duck.setupWifi();
  // initialize DNS
  duck.setupDns();
  // initialize web server, enabling the captive portal with a custom HTML page
  duck.setupWebServer(true);
  // initialize Over The Air firmware upgrade
  duck.setupOTA();

  
   timer.every(INTERVAL_MS, runSensor);
   myFloats[0] = -6.6;
   myFloats[1] = 119.1;
   myFloats[2] = 5.6;
   myFloats[3] = 1.8;
   myFloats[4] = 52.6 ;
   myFloats[5] = 1.80;
   myFloats[6] = 5.62;
   myFloats[7] = 11.84;
   myFloats[8] = 5.6;
   myFloats[9] = 1.8;
   myFloats[10] = 52.6 ;
   myFloats[11] = 1.80;
   myFloats[12] = 5.62;
   myFloats[13] = 11.84;
   myFloats[14] = 11.84;
   myFloats[15] = 5.6;
   myFloats[16] = 1.8;
   myFloats[17] = 52.6 ;
   myFloats[18] = 1.80;
   myFloats[19] = 121.1;

   
   
   
   
   
}



 void loop() {



  
  //memcpy(myChars, myFloats, sizeof(myFloats));
  //myFloats[0] = (float) millis();
  timer.tick();
  
  // Use the default run(). The Mama duck is designed to also forward data it
  // receives from other ducks, across the network. It has a basic routing
  // mechanism built-in to prevent messages from hoping endlessly.
  duck.run();
  
}

bool runSensor(void *) {
  bool result;
  const byte* buffer;
  
  //memcpy(myChars, myFloats, sizeof(myFloats));
  //myChars[0] = 56;
  //myChars[1] = 46;
  //myChars[2] = 53;
  
  //YOU MUST SET THE ENTIRE MYCHARS BEFORE YOU LEAVE THIS, I WOULD MAKE THIS A FUNCTION OF ITS OWN, THEN RETURN THE FUNCTION VALUE AS A TEMPMYCHARS, 
  //THEN APPEND THAT TO THE END OF REAL MY CHARS FOR EVERY SINGLE DIFFERENT FLOAT. SO A NEST FOR LOOP, WHICH IS A TEMPORARY SOLUTION AND NOT OPTIMAL. 
  // NOTE THE VALUE OF i DOES CAN BE HARDCODED FOR NOW AS THE MOST SIG FIGS YOU WOULD WANT IN ANY OF YOUR DATA SETS. THIS WILL BE FIXED LATER, BUT FOR IT 
  //TO BE VIABLE BY THE WEEKEND I THINK HARDCODING IT IS FINE. HAVE A NICE WEEKEND, GOODLUCK!!!! -KALEB NAILS
  float myfavorite = 5.55;
  dtostrf(myfavorite,0,3,Buffer);
  for (int i=0; i<11; i++) {
    Serial.println(Buffer[i]);
    myChars[i] = Buffer[i];

  }
  
  

  /*
  String message =  String(myChars);
  int length = message.length();
  Serial.print("[MAMA] sensor data: ");
  Serial.println(message);
  buffer = (byte*) message.c_str(); 
*/

  //memcpy(myChars, myFloats, sizeof(myFloats));
  //result = sendData(myChars, sizeof(myChars));
  int length = sizeof(myChars);
  result = sendData(myChars, length);
  if (result) {
    Serial.println("[MAMA] runSensor ok.");
    String myString = (char*)myChars;
    Serial.println(myString);
    
    Serial.println(length);

  } else {
    Serial.println("[MAMA] runSensor failed.");
  }
  
  return result;
}



float Dummy_data() {
  Rnd = random(0,100) + random(0,100)/ 100.0;
  return Rnd;
}


bool sendData(const byte* myChars, int length) {
  bool sentOk = false;
  
  // Send Data can either take a byte buffer (unsigned char) or a vector
  int err = duck.sendData(topics::status, myChars, length);//myChars, sizeof(myChars));
  if (err == DUCK_ERR_NONE) {
    
    myFloats[0]++;
    
    // This is an awful way to do this. But it works
//    myFloats[1] = Dummy_data();
//    myFloats[2] = Dummy_data();
//    myFloats[3] = Dummy_data();
//    myFloats[4] = Dummy_data();
//    myFloats[5] = Dummy_data();
//    myFloats[6] = Dummy_data();
//    myFloats[7] = Dummy_data();

    

    
    sentOk = true;
  }
  if (!sentOk) {
    Serial.println("[MAMA] Failed to send data. error = " + String(err));
  }
  return sentOk;
}
